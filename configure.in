#
#  configure.in - hplip autoconf input file
# 
#  (c) 2004-2005 Copyright Hewlett-Packard Development Company, LP
# 
# exit status:
#   0 = ok
#   1 = error
#   2 = no libusb
#   3 = no cups-devel
#   4 = no libnetsnmp
#   5 = no netsnmp-devel
#   6 = no python-devel
#   7 = no pthread-devel
#   8 = no ppdev-devel
#

AC_PREREQ(2.59)
AC_INIT([HP Linux Imaging and Printing], [1.6.10], [1.6.10.11], [hplip])
AM_INIT_AUTOMAKE([1.9 foreign])
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
AC_CONFIG_SUBDIRS(prnt/hpijs)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL

AC_ARG_VAR([PYTHON], [Python interpreter/compiler command])
AM_PATH_PYTHON([2.2])

AC_ARG_VAR([CHKCONFIG], [RH chkconfig utility])
AC_PATH_TOOL([CHKCONFIG], [chkconfig],, [$PATH:/sbin:/usr/lib/lsb])

AC_ARG_VAR([INSTALLINITD], [LSB install_initd utility])
AC_PATH_TOOL([INSTALLINITD], [install_initd],, [$PATH:/sbin:/usr/lib/lsb])

# Checks for libraries, sets -lpthread, -lcrypto, -lnetsnmp for LIBS and HAVE_LIBSNMP.
AC_CHECK_LIB([pthread], [pthread_create])
AC_CHECK_LIB([crypto], [CRYPTO_free])
AC_CHECK_LIB([netsnmp], [snmp_timeout], [libsnmp=yes], [libsnmp=no])
AC_CHECK_LIB([usb], [usb_init],, [AC_MSG_ERROR([cannot find libusb support], 2)])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(cups/cups.h, ,[AC_MSG_ERROR([cannot find cups-devel support], 3)])
AC_CHECK_HEADERS(net-snmp/net-snmp-config.h, snmpdevel=yes, snmpdevel=no)
AC_CHECK_HEADERS(python$PYTHON_VERSION/Python.h, ,[AC_MSG_ERROR([cannot find python-devel support], 6)])
AC_CHECK_HEADERS(pthread.h, ,[AC_MSG_ERROR([cannot find pthread-devel support], 7)])
AC_CHECK_HEADERS(linux/compiler.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN

AC_MSG_CHECKING([for network build])
AC_ARG_ENABLE(network_build,
  [  --enable-network-build    enable network build (default=yes)],
  network_build=$enableval, network_build=yes)
if test "$network_build" = "yes"; then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for parallel port build])
AC_ARG_ENABLE(pp_build,
  [  --enable-pp-build    enable parallel port build (default=yes)],
  pp_build=$enableval, pp_build=yes)
if test "$pp_build" = "yes"; then
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_PPORT) 
else
   AC_MSG_RESULT(no)
fi

if test "$pp_build" = "yes"; then
   AC_CHECK_HEADERS(linux/ppdev.h, ,[AC_MSG_ERROR([cannot find ppdev-devel support (or --disable-pp-build)], 8)])
fi
   
AC_MSG_CHECKING([for scanner build])
AC_ARG_ENABLE(scan_build,
  [  --enable-scan-build    enable scanner build (default=yes)],
  scan_build=$enableval, scan_build=yes)
if test "$scan_build" = "yes"; then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(SCAN_BUILD, test x$scan_build = xyes)

AC_MSG_CHECKING([for gui build])
AC_ARG_ENABLE(gui_build,
  [  --enable-gui-build    enable gui build (default=yes)],
  gui_build=$enableval, gui_build=yes)
if test "$gui_build" = "yes"; then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for fax build])
AC_ARG_ENABLE(fax_build,
  [  --enable-fax-build    enable fax build (default=yes)],
  fax_build=$enableval, fax_build=yes)
if test "$fax_build" = "yes"; then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

CUPSSEARCHPATH="/usr/share /usr/local/share /usr/lib /usr/local/lib /usr/libexec /usr/lib64 /opt"

AC_MSG_CHECKING("for cups ppd path")
CUPS_PPD_PATH="/usr/share/cups"
for i in $CUPSSEARCHPATH; do
   if test -d "$i/cups/model"; then
      CUPS_PPD_PATH="$i/cups"
      break
   fi
done
AC_MSG_RESULT("using $CUPS_PPD_PATH")

AC_MSG_CHECKING("for cups backend path")
CUPS_BACKEND_PATH="/usr/lib/cups/backend"
for i in $CUPSSEARCHPATH; do
   if test -d "$i/cups/backend"; then
      CUPS_BACKEND_PATH="$i/cups/backend"
      break
   fi
done
AC_MSG_RESULT("using $CUPS_BACKEND_PATH")

ICONSEARCHPATH="/usr/lib/menu /usr/share/applications"
ICON="hplip hplip.desktop"

AC_MSG_CHECKING("for icon directory")
ICON_PATH=""
ICON_FILE=""
idx=1
for i in $ICONSEARCHPATH; do
   if test -d "$i"; then
      ICON_PATH="$i"
      jdx=1
      for j in $ICON; do
         if test "$jdx" = "$idx"; then
            break
         fi
         jdx=$jdx+1
      done
      ICON_FILE="$j"
      break
   fi
   idx=$idx+1
done
if test "$ICON_PATH" != ""; then
   AC_MSG_RESULT("using $ICON_PATH/$ICON_FILE")
else
   AC_MSG_RESULT("no")
fi

if test "$network_build" = "yes"; then
   if test "$libsnmp" = "no"; then
      AC_MSG_ERROR([cannot find net-snmp support (or --disable-network-build)], 4)
   fi
   if test "$snmpdevel" = "no"; then
      AC_MSG_ERROR([cannot find net-snmp-devel support (or --disable-network-build)], 5)
   fi
   AC_DEFINE(HAVE_LIBSNMP) 
   LIBS="-lnetsnmp $LIBS"
fi

if test "$fax_build" = "yes"; then
   ac_configure_args="$ac_configure_args --enable-hplip-build"
fi

AC_SUBST(network_build)
AC_SUBST(pp_build)
AC_SUBST(gui_build)
AC_SUBST(scan_build)
AC_SUBST(fax_build)
AC_SUBST(CUPS_BACKEND_PATH)
AC_SUBST(CUPS_PPD_PATH)
AC_SUBST(ICON_PATH)
AC_SUBST(ICON_FILE)

AC_CONFIG_FILES(Makefile)
AC_OUTPUT
